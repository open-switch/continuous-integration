#!/usr/bin/env bash
set -euo pipefail
# set -x

[[ $# -lt 3 ]] && {
  echo "Usage: $0 <ssh-key-file> <debian-dist> <files>..." >&2
exit 1
}

key_file="$1"; shift
dist="$1"; shift
files=( "$@" )

instance_ip="$(aws ec2 describe-instances --filters "Name=tag:BuildkiteQueue,Values=aptly" --query 'Reservations[0].Instances[0].PublicIpAddress' | cut -d'"' -f2)"

ssh_aws() {
  echo "[INFO] $*"
  ssh -o "StrictHostKeyChecking no" -i "$key_file" "ec2-user@$instance_ip" "sudo -u buildkite-agent -i bash -c '$*'"
}

init() {
  if [[ ! -e "$key_file" ]]; then
    echo "Key file $key_file not found." >&2
    return 1
  fi

  if ! ssh_aws test -e '.aws/config' >/dev/null; then
    echo "AWS config not present on agent." >&2
    return 1
  fi
  if ! ssh_aws test -e '.aws/credentials' >/dev/null; then
    echo "AWS credentials not present on agent." >&2
    return 1
  fi

  printf "[INFO] Waiting for builds to finish" >&2

  while true; do
    # API Access token for account opx in Buildkite stored in Secrets Manager.
    secrets_mgr_token="$(aws secretsmanager get-secret-value --secret-id BuildkiteAPIToken | jq -r .'SecretString')"
    running_builds="$(curl -s -H "Authorization: Bearer $secrets_mgr_token" "https://api.buildkite.com/v2/builds?state=running")"
    if [[ "$running_builds" -gt 0 ]]; then
      printf "." >&2
      sleep 5
    else
      printf " done!\\n" >&2
      break
    fi
  done

  trap cleanup EXIT

  ssh_aws sudo service buildkite-agent-1 stop

  ssh_aws aws s3 sync --delete s3://aptly.openswitch.net/ /aptly
}

cleanup() {
  set +e
  ssh -o "StrictHostKeyChecking no" -i "$key_file" "ec2-user@$instance_ip" 'sudo rm -rf /privup/'
  ssh_aws /usr/local/bin/aptly db cleanup
  ssh_aws aws s3 sync --delete /aptly s3://aptly.openswitch.net/
  ssh_aws sudo service buildkite-agent-1 start
  set -e
}

main() {
  ssh -o "StrictHostKeyChecking no" -i "$key_file" "ec2-user@$instance_ip" 'sudo mkdir -p /privup/'
  ssh -o "StrictHostKeyChecking no" -i "$key_file" "ec2-user@$instance_ip" 'sudo chmod -R a+rwx /privup/'
  rsync -Pav -e "ssh -o \"StrictHostKeyChecking no\" -i $key_file" "${files[@]}" "ec2-user@$instance_ip:/privup/"
  echo "Adding packages: $(ssh_aws ls '/privup/')"

  if [[ "$dist" == "jessie" ]]; then
    ssh_aws /usr/local/bin/aptly repo add "opx-non-free" '/privup/'
    ssh_aws /usr/local/bin/aptly publish update unstable "s3:opx:"
    ssh_aws /usr/local/bin/aptly publish update testing "s3:opx:"
    ssh_aws /usr/local/bin/aptly publish update stable "s3:opx:"
    ssh_aws /usr/local/bin/aptly publish update 2-updates "s3:opx:"
    ssh_aws /usr/local/bin/aptly publish update unstable "s3:opx:$dist"
    ssh_aws /usr/local/bin/aptly publish update testing "s3:opx:$dist"
    ssh_aws /usr/local/bin/aptly publish update stable "s3:opx:$dist"
    ssh_aws /usr/local/bin/aptly publish update 2-updates "s3:opx:$dist"
  else
    ssh_aws /usr/local/bin/aptly repo add "opx-non-free-$dist" '/privup/'
    ssh_aws /usr/local/bin/aptly publish update unstable "s3:opx:$dist"
    ssh_aws /usr/local/bin/aptly publish update testing "s3:opx:$dist"
    ssh_aws /usr/local/bin/aptly publish update stable "s3:opx:$dist"
    if [[ "$dist" == "stretch" ]]; then
      ssh_aws /usr/local/bin/aptly publish update 3-updates "s3:opx:$dist"
    fi
  fi
}

if init; then
  main
else
  echo "[ERROR]: Failed to initialize" >&2
  exit 1
fi
